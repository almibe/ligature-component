// Generated by ReScript, PLEASE EDIT WITH CARE

import Ava from "ava";
import * as Ligature from "../src/Ligature.res.mjs";
import * as WanderParser from "../src/WanderParser.res.mjs";

Ava("parse empty string", (function (t) {
        t.deepEqual(WanderParser.parse(""), []);
      }));

Ava("parse single call with no args", (function (t) {
        t.deepEqual(WanderParser.parse("test"), [{
                type: "call",
                commandName: "test",
                arguments: []
              }]);
      }));

Ava("parse single call with single arg", (function (t) {
        t.deepEqual(WanderParser.parse("test 1"), [{
                type: "call",
                commandName: "test",
                arguments: [{
                    TAG: "Element",
                    _0: Ligature.element("1")
                  }]
              }]);
      }));

Ava("parse single call with multiple args", (function (t) {
        t.deepEqual(WanderParser.parse("test 1 2 3"), [{
                type: "call",
                commandName: "test",
                arguments: [
                  {
                    TAG: "Element",
                    _0: Ligature.element("1")
                  },
                  {
                    TAG: "Element",
                    _0: Ligature.element("2")
                  },
                  {
                    TAG: "Element",
                    _0: Ligature.element("3")
                  }
                ]
              }]);
      }));

Ava("parse single call with slot arg", (function (t) {
        t.deepEqual(WanderParser.parse("test ?var"), [{
                type: "call",
                commandName: "test",
                arguments: [{
                    TAG: "Slot",
                    _0: Ligature.slot("?var")
                  }]
              }]);
      }));

Ava("parse single call with emppy network arg", (function (t) {
        t.deepEqual(WanderParser.parse("test {}"), [{
                type: "call",
                commandName: "test",
                arguments: [{
                    TAG: "Network",
                    _0: Ligature.network([])
                  }]
              }]);
      }));

Ava("parse single call with network arg", (function (t) {
        t.deepEqual(WanderParser.parse("test {a b c}"), [{
                type: "call",
                commandName: "test",
                arguments: [{
                    TAG: "Network",
                    _0: Ligature.network([Ligature.triple({
                                TAG: "Element",
                                _0: Ligature.element("a")
                              }, {
                                TAG: "Element",
                                _0: Ligature.element("b")
                              }, {
                                TAG: "VElement",
                                _0: Ligature.element("c")
                              })])
                  }]
              }]);
      }));

Ava("parse network with two triples", (function (t) {
        t.deepEqual(WanderParser.parse("test {a b c, d e f}"), [{
                type: "call",
                commandName: "test",
                arguments: [{
                    TAG: "Network",
                    _0: Ligature.network([
                          Ligature.triple({
                                TAG: "Element",
                                _0: Ligature.element("a")
                              }, {
                                TAG: "Element",
                                _0: Ligature.element("b")
                              }, {
                                TAG: "VElement",
                                _0: Ligature.element("c")
                              }),
                          Ligature.triple({
                                TAG: "Element",
                                _0: Ligature.element("d")
                              }, {
                                TAG: "Element",
                                _0: Ligature.element("e")
                              }, {
                                TAG: "VElement",
                                _0: Ligature.element("f")
                              })
                        ])
                  }]
              }]);
      }));

Ava("parse network with slots", (function (t) {
        t.deepEqual(WanderParser.parse("test {?a b ?c, d ?e f}"), [{
                type: "call",
                commandName: "test",
                arguments: [{
                    TAG: "Network",
                    _0: Ligature.network([
                          Ligature.triple({
                                TAG: "Slot",
                                _0: Ligature.slot("?a")
                              }, {
                                TAG: "Element",
                                _0: Ligature.element("b")
                              }, {
                                TAG: "VSlot",
                                _0: Ligature.slot("?c")
                              }),
                          Ligature.triple({
                                TAG: "Element",
                                _0: Ligature.element("d")
                              }, {
                                TAG: "Slot",
                                _0: Ligature.slot("?e")
                              }, {
                                TAG: "VElement",
                                _0: Ligature.element("f")
                              })
                        ])
                  }]
              }]);
      }));

Ava("parse script with multiple calls", (function (t) {
        t.deepEqual(WanderParser.parse("test 1, test 2"), [
              {
                type: "call",
                commandName: "test",
                arguments: [{
                    TAG: "Element",
                    _0: Ligature.element("1")
                  }]
              },
              {
                type: "call",
                commandName: "test",
                arguments: [{
                    TAG: "Element",
                    _0: Ligature.element("2")
                  }]
              }
            ]);
      }));

export {
  
}
/*  Not a pure module */
