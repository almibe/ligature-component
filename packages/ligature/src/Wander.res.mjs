// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Model from "./Model.res.mjs";
import * as Commands from "./Commands.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as WanderParser from "./WanderParser.res.mjs";

function run(script, modulesOpt) {
  if (modulesOpt !== undefined) {
    Caml_option.valFromOption(modulesOpt);
  } else {
    Commands.stdModules();
  }
  var script$1 = WanderParser.parse(script);
  var result = {
    TAG: "Ok",
    _0: undefined
  };
  script$1.forEach(function (expression) {
        
      });
  return result;
}

function printResult(value) {
  if (value.TAG !== "Ok") {
    return value._0;
  }
  var value$1 = value._0;
  if (value$1 !== undefined) {
    return Model.printValue(value$1);
  } else {
    return "--nothing--";
  }
}

function toJs(result) {
  if (result.TAG !== "Ok") {
    return {
            NAME: "Error",
            VAL: result._0
          };
  }
  var match = result._0;
  if (match !== undefined) {
    if (typeof match !== "object") {
      throw {
            RE_EXN_ID: "Failure",
            _1: "Unexpected value, toJs only supports Networks.",
            Error: new Error()
          };
    }
    if (match.TAG === "Network") {
      var result$1 = [];
      match._0.value.forEach(function (triple) {
            var e = triple.element;
            var element;
            element = e.TAG === "Element" ? ({
                  type: "element",
                  value: e._0.value
                }) : ({
                  type: "slot",
                  value: e._0.value
                });
            var e$1 = triple.role;
            var role;
            role = e$1.TAG === "Element" ? ({
                  type: "element",
                  value: e$1._0.value
                }) : ({
                  type: "slot",
                  value: e$1._0.value
                });
            var e$2 = triple.value;
            var value;
            switch (e$2.TAG) {
              case "VElement" :
                  value = {
                    type: "element",
                    value: e$2._0.value
                  };
                  break;
              case "VSlot" :
                  value = {
                    type: "slot",
                    value: e$2._0.value
                  };
                  break;
              case "VLiteral" :
                  value = {
                    type: "literal",
                    value: e$2._0.value
                  };
                  break;
              
            }
            result$1.push({
                  type: "triple",
                  element: element,
                  role: role,
                  value: value
                });
          });
      return {
              NAME: "Network",
              VAL: result$1
            };
    }
    throw {
          RE_EXN_ID: "Failure",
          _1: "Unexpected value, toJs only supports Networks.",
          Error: new Error()
        };
  } else {
    throw {
          RE_EXN_ID: "Failure",
          _1: "Unexpected value, toJs only supports Networks.",
          Error: new Error()
        };
  }
}

export {
  run ,
  printResult ,
  toJs ,
}
/* WanderParser Not a pure module */
