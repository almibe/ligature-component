// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ligature from "./Ligature.res.mjs";
import * as Core__List from "@rescript/core/src/Core__List.res.mjs";
import * as WanderParser from "./WanderParser.res.mjs";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";

function executeAction(action, actions, networks, stack) {
  var action$1 = Belt_MapString.get(actions, action.value);
  if (action$1 !== undefined) {
    return action$1(networks, stack);
  } else {
    return {
            TAG: "Error",
            _0: "Could not find action " + action.value
          };
  }
}

function $$eval(atom, actions, networks, stack) {
  if (atom.TAG === "Element") {
    return executeAction(atom._0, actions, networks, stack);
  } else {
    return {
            TAG: "Ok",
            _0: [
              networks,
              Core__List.add(stack, atom)
            ]
          };
  }
}

function run(script, actions, networks) {
  var values = WanderParser.parse(script);
  if (values.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: values._0
          };
  }
  var stack = {
    contents: /* [] */0
  };
  var networks$1 = {
    contents: Ligature.emptyNetworks
  };
  values._0.forEach(function (atom) {
        var err = $$eval(atom, actions, networks$1.contents, stack.contents);
        if (err.TAG === "Ok") {
          var match = err._0;
          stack.contents = match[1];
          networks$1.contents = match[0];
          return ;
        }
        throw {
              RE_EXN_ID: "Failure",
              _1: "Error: " + err._0,
              Error: new Error()
            };
      });
  return {
          TAG: "Ok",
          _0: [
            networks$1.contents,
            stack.contents
          ]
        };
}

function readNetwork(input) {
  var results = WanderParser.parse(input);
  if (results.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: results._0
          };
  }
  var results$1 = results._0;
  if (results$1.length !== 1) {
    return {
            TAG: "Error",
            _0: "Error reading Network."
          };
  }
  var network = results$1[0];
  if (network.TAG === "Network") {
    return {
            TAG: "Ok",
            _0: network._0
          };
  } else {
    return {
            TAG: "Error",
            _0: "Could not read network."
          };
  }
}

function printStack(stack) {
  return Core__List.reduce(stack, "", (function (state, value) {
                return state + " â†’ " + Ligature.printValue(value) + "\n";
              }));
}

function printResult(value) {
  if (value.TAG === "Ok") {
    return printStack(value._0);
  } else {
    return value._0;
  }
}

function networkToJs(network) {
  if (network.TAG === "Network") {
    var result = [];
    network._0.forEach(function (triple) {
          var e = triple.element;
          var element;
          element = e.TAG === "Element" ? ({
                type: "element",
                value: e._0.value
              }) : ({
                type: "slot",
                value: e._0.value
              });
          var e$1 = triple.role;
          var role;
          role = e$1.TAG === "Element" ? ({
                type: "element",
                value: e$1._0.value
              }) : ({
                type: "slot",
                value: e$1._0.value
              });
          var e$2 = triple.value;
          var value;
          switch (e$2.TAG) {
            case "VElement" :
                value = {
                  type: "element",
                  value: e$2._0.value
                };
                break;
            case "VSlot" :
                value = {
                  type: "slot",
                  value: e$2._0.value
                };
                break;
            case "VLiteral" :
                value = {
                  type: "literal",
                  value: e$2._0.value
                };
                break;
            case "VQuote" :
            case "VNetworkName" :
                throw {
                      RE_EXN_ID: "Match_failure",
                      _1: [
                        "Wander.res",
                        100,
                        20
                      ],
                      Error: new Error()
                    };
            
          }
          result.push({
                type: "triple",
                element: element,
                role: role,
                value: value
              });
        });
    return result;
  }
  throw {
        RE_EXN_ID: "Failure",
        _1: "Unsupported.",
        Error: new Error()
      };
}

export {
  executeAction ,
  $$eval ,
  run ,
  readNetwork ,
  printStack ,
  printResult ,
  networkToJs ,
}
/* WanderParser Not a pure module */
