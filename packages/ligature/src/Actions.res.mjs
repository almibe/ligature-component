// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Ligature from "./Ligature.res.mjs";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";

var stdActions = Belt_MapString.fromArray([
      [
        "assert-equal",
        (function (networks, stack) {
            if (!stack) {
              return {
                      TAG: "Error",
                      _0: "assert-equal requires two values on stack."
                    };
            }
            var match = stack.tl;
            if (match) {
              if (Caml_obj.equal(stack.hd, match.hd)) {
                return {
                        TAG: "Ok",
                        _0: [
                          networks,
                          match.tl
                        ]
                      };
              } else {
                return {
                        TAG: "Error",
                        _0: "Values not equal."
                      };
              }
            } else {
              return {
                      TAG: "Error",
                      _0: "assert-equal requires two values on stack."
                    };
            }
          })
      ],
      [
        "count",
        (function (networks, stack) {
            if (!stack) {
              return {
                      TAG: "Error",
                      _0: "count requires a network on top of the stack."
                    };
            }
            var value = stack.hd;
            if (value.TAG === "Network") {
              return {
                      TAG: "Ok",
                      _0: [
                        networks,
                        {
                          hd: {
                            TAG: "Literal",
                            _0: Ligature.Literal.literal(value._0.length.toString())
                          },
                          tl: stack.tl
                        }
                      ]
                    };
            } else {
              return {
                      TAG: "Error",
                      _0: "count requires a network on top of the stack."
                    };
            }
          })
      ]
    ]);

export {
  stdActions ,
}
/* stdActions Not a pure module */
