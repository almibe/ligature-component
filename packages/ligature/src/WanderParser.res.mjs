// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ligature from "./Ligature.res.mjs";
import * as WanderTokenizerJs from "./WanderTokenizer.js";

function reset(prim) {
  WanderTokenizerJs.reset(prim);
}

function next(prim) {
  return WanderTokenizerJs.next();
}

function readIgnoreWS() {
  while(true) {
    var value = WanderTokenizerJs.next();
    if (value === null || value === undefined) {
      return null;
    }
    if (value.type !== "ws") {
      return value;
    }
    continue ;
  };
}

function readElementPattern() {
  var match = readIgnoreWS();
  if (match === null || match === undefined) {
    return null;
  }
  switch (match.type) {
    case "element" :
        return {
                TAG: "Element",
                _0: Ligature.$$Element.element(match.value)
              };
    case "slot" :
        return {
                TAG: "Slot",
                _0: Ligature.Slot.slot(match.value)
              };
    default:
      return null;
  }
}

function readNetwork(triples) {
  while(true) {
    var match = readIgnoreWS();
    if (match === null || match === undefined) {
      return null;
    }
    switch (match.type) {
      case "cbrace" :
          return Ligature.network(triples);
      case "comma" :
          continue ;
      case "element" :
          var match$1 = readElementPattern();
          var match$2 = readValue();
          if (match$1 === null || match$1 === undefined) {
            return null;
          }
          if (match$2 === null || match$2 === undefined) {
            return null;
          }
          triples.push(Ligature.triple({
                    TAG: "Element",
                    _0: Ligature.$$Element.element(match.value)
                  }, match$1, match$2));
          continue ;
      case "slot" :
          var match$3 = readElementPattern();
          var match$4 = readValue();
          if (match$3 === null || match$3 === undefined) {
            return null;
          }
          if (match$4 === null || match$4 === undefined) {
            return null;
          }
          triples.push(Ligature.triple({
                    TAG: "Slot",
                    _0: Ligature.Slot.slot(match.value)
                  }, match$3, match$4));
          continue ;
      default:
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "WanderParser.res",
                37,
                2
              ],
              Error: new Error()
            };
    }
  };
}

function readValue() {
  var match = readIgnoreWS();
  if (match === null || match === undefined) {
    return null;
  }
  switch (match.type) {
    case "element" :
        return {
                TAG: "VElement",
                _0: Ligature.$$Element.element(match.value)
              };
    case "literal" :
        return {
                TAG: "VLiteral",
                _0: Ligature.Literal.literal(match.value)
              };
    case "oparen" :
        var value = readQuote();
        return {
                TAG: "VQuote",
                _0: value
              };
    case "slot" :
        return {
                TAG: "VSlot",
                _0: Ligature.Slot.slot(match.value)
              };
    default:
      return null;
  }
}

function readQuote() {
  var token = readIgnoreWS();
  var args = [];
  var cont = true;
  while(cont) {
    var unexpected = token;
    if (unexpected === null || unexpected === undefined) {
      if (unexpected === null) {
        cont = false;
      } else {
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "WanderParser.res",
                94,
                4
              ],
              Error: new Error()
            };
      }
    } else {
      switch (unexpected.type) {
        case "cparen" :
            cont = false;
            break;
        case "element" :
            args.push({
                  TAG: "Element",
                  _0: Ligature.$$Element.element(unexpected.value)
                });
            token = readIgnoreWS();
            break;
        case "obrace" :
            var value = readNetwork([]);
            if (value === null || value === undefined) {
              if (value === null) {
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Unexpected value while reading network.",
                      Error: new Error()
                    };
              }
              throw {
                    RE_EXN_ID: "Failure",
                    _1: "Unexpected value while reading network.",
                    Error: new Error()
                  };
            } else {
              args.push({
                    TAG: "Network",
                    _0: value
                  });
            }
            token = readIgnoreWS();
            break;
        case "slot" :
            args.push({
                  TAG: "Slot",
                  _0: Ligature.Slot.slot(unexpected.value)
                });
            token = readIgnoreWS();
            break;
        default:
          console.log("Unexpected value");
          console.log(unexpected);
      }
    }
  };
  return args;
}

function readAtoms() {
  var atoms = [];
  var cont = true;
  while(cont) {
    var match = readIgnoreWS();
    if (match === null || match === undefined) {
      cont = false;
    } else {
      switch (match.type) {
        case "comma" :
            atoms.push("Comma");
            break;
        case "comment" :
            break;
        case "element" :
            atoms.push({
                  TAG: "Element",
                  _0: {
                    value: match.value,
                    type: "element"
                  }
                });
            break;
        case "literal" :
            atoms.push({
                  TAG: "Literal",
                  _0: {
                    value: match.value,
                    type: "literal"
                  }
                });
            break;
        case "obrace" :
            var value = readNetwork([]);
            if (value === null || value === undefined) {
              if (value === null) {
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Unexpected value while reading network.",
                      Error: new Error()
                    };
              }
              throw {
                    RE_EXN_ID: "Failure",
                    _1: "Unexpected value while reading network.",
                    Error: new Error()
                  };
            } else {
              atoms.push({
                    TAG: "Network",
                    _0: value
                  });
            }
            break;
        case "oparen" :
            var quote = readQuote();
            atoms.push({
                  TAG: "Quote",
                  _0: quote
                });
            break;
        case "slot" :
            atoms.push({
                  TAG: "Slot",
                  _0: {
                    value: match.value,
                    type: "slot"
                  }
                });
            break;
        default:
          throw {
                RE_EXN_ID: "Match_failure",
                _1: [
                  "WanderParser.res",
                  157,
                  4
                ],
                Error: new Error()
              };
      }
    }
  };
  return atoms;
}

function parseScript(atoms) {
  var res = [];
  var cont = true;
  var offset = 0;
  while(cont) {
    var match = atoms[offset];
    if (match !== undefined) {
      if (typeof match !== "object") {
        throw {
              RE_EXN_ID: "Failure",
              _1: "Error",
              Error: new Error()
            };
      }
      if (match.TAG === "Network") {
        var match$1 = match._0;
        if (match$1.type === "network") {
          offset = offset + 1 | 0;
          res.push(Ligature.network(match$1.value));
        } else {
          throw {
                RE_EXN_ID: "Failure",
                _1: "Error",
                Error: new Error()
              };
        }
      } else {
        throw {
              RE_EXN_ID: "Failure",
              _1: "Error",
              Error: new Error()
            };
      }
    } else {
      cont = false;
    }
  };
  return {
          TAG: "Ok",
          _0: res
        };
}

function parse(script) {
  WanderTokenizerJs.reset(script);
  var atoms = readAtoms();
  return parseScript(atoms);
}

function readTriple() {
  return null;
}

export {
  reset ,
  next ,
  readIgnoreWS ,
  readElementPattern ,
  readNetwork ,
  readValue ,
  readQuote ,
  readAtoms ,
  parseScript ,
  parse ,
  readTriple ,
}
/* ./WanderTokenizer.js Not a pure module */
